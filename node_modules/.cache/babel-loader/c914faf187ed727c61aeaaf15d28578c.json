{"ast":null,"code":"import { LOG_ERROR, UPDATE_RECIPES, MAKING_CHANGES, ADD_RECIPE } from \"../actions/recipesActions\";\nconst initialState = {\n  recipes: [],\n  message: \"\",\n  makingChanges: false\n};\nexport const recipesReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case MAKING_CHANGES:\n      return { ...state,\n        makingChanges: true\n      };\n\n    case UPDATE_RECIPES:\n      return { ...state,\n        recipes: state.recipes.map(recipe => recipe.id !== action.payload.id ? recipe : { ...recipe,\n          title: action.payload.title,\n          source: action.payload.source\n        }),\n        makingChanges: false\n      };\n\n    case \"DELETE_RECIPE\":\n      return { ...state,\n        recipes: state.recipes.filter(recipe => recipe.id !== action.payload.id)\n      };\n\n    case ADD_RECIPE:\n      return { ...state,\n        recipes: [...state.recipes, action.payload]\n      };\n\n    case LOG_ERROR:\n      return { ...state,\n        message: action.payload\n      };\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"sources":["/home/me/lambda/updates/SFR2-Frontend/secret_family_recipes/src/reducers/recipesReducer.js"],"names":["LOG_ERROR","UPDATE_RECIPES","MAKING_CHANGES","ADD_RECIPE","initialState","recipes","message","makingChanges","recipesReducer","state","action","type","map","recipe","id","payload","title","source","filter"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,cAApB,EAAoCC,cAApC,EAAoDC,UAApD,QAAsE,2BAAtE;AAEA,MAAMC,YAAY,GAClB;AACEC,EAAAA,OAAO,EAAE,EADX;AAEEC,EAAAA,OAAO,EAAE,EAFX;AAGEC,EAAAA,aAAa,EAAE;AAHjB,CADA;AAOA,OAAO,MAAMC,cAAc,GAAG,CAAEC,KAAK,GAAGL,YAAV,EAAwBM,MAAxB,KAC9B;AACE,UAAQA,MAAM,CAACC,IAAf;AAEE,SAAKT,cAAL;AACE,aAAO,EAAE,GAAGO,KAAL;AAAYF,QAAAA,aAAa,EAAE;AAA3B,OAAP;;AACF,SAAKN,cAAL;AACE,aAAO,EAAE,GAAGQ,KAAL;AAAYJ,QAAAA,OAAO,EAAEI,KAAK,CAACJ,OAAN,CAAcO,GAAd,CAAmBC,MAAM,IAAIA,MAAM,CAACC,EAAP,KAAcJ,MAAM,CAACK,OAAP,CAAeD,EAA7B,GAAkCD,MAAlC,GAA2C,EAAE,GAAGA,MAAL;AAAaG,UAAAA,KAAK,EAAEN,MAAM,CAACK,OAAP,CAAeC,KAAnC;AAA0CC,UAAAA,MAAM,EAAEP,MAAM,CAACK,OAAP,CAAeE;AAAjE,SAAxE,CAArB;AAA0KV,QAAAA,aAAa,EAAE;AAAzL,OAAP;;AACF,SAAK,eAAL;AACE,aAAO,EAAE,GAAGE,KAAL;AAAYJ,QAAAA,OAAO,EAAEI,KAAK,CAACJ,OAAN,CAAca,MAAd,CAAsBL,MAAM,IAAIA,MAAM,CAACC,EAAP,KAAcJ,MAAM,CAACK,OAAP,CAAeD,EAA7D;AAArB,OAAP;;AACF,SAAKX,UAAL;AACI,aAAM,EAAE,GAAGM,KAAL;AAAYJ,QAAAA,OAAO,EAAE,CAAE,GAAGI,KAAK,CAACJ,OAAX,EAAoBK,MAAM,CAACK,OAA3B;AAArB,OAAN;;AACJ,SAAKf,SAAL;AACE,aAAO,EAAE,GAAGS,KAAL;AAAYH,QAAAA,OAAO,EAAEI,MAAM,CAACK;AAA5B,OAAP;;AACF;AACE,aAAON,KAAP;AAbJ;AAeD,CAjBM","sourcesContent":["import { LOG_ERROR, UPDATE_RECIPES, MAKING_CHANGES, ADD_RECIPE } from \"../actions/recipesActions\";\n\nconst initialState = \n{\n  recipes: [],\n  message: \"\",\n  makingChanges: false,\n};\n\nexport const recipesReducer = ( state = initialState, action ) => \n{\n  switch( action.type ) \n  {\n    case MAKING_CHANGES:\n      return { ...state, makingChanges: true };\n    case UPDATE_RECIPES:\n      return { ...state, recipes: state.recipes.map( recipe => recipe.id !== action.payload.id ? recipe : { ...recipe, title: action.payload.title, source: action.payload.source } ), makingChanges: false };\n    case \"DELETE_RECIPE\":\n      return { ...state, recipes: state.recipes.filter( recipe => recipe.id !== action.payload.id ) };    \n    case ADD_RECIPE:\n        return{ ...state, recipes: [ ...state.recipes, action.payload ] }\n    case LOG_ERROR:\n      return { ...state, message: action.payload };\n    default:\n      return state;\n  }\n};"]},"metadata":{},"sourceType":"module"}