{"ast":null,"code":"var _jsxFileName = \"/home/me/lambda/updates/SFR2-Frontend/secret_family_recipes/src/components/Ingredient.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\n/* \nSo, for this I basically gave each ingredientObj it's\nOwn Slice of State, and then whenever it's updated\nI also (with useEffect) update the state in\nthe actual form.\n\nThis is because I need to put the change in the correct\nplace in the ingredientObj, copy the ingredients array,\nand replace the correct index with ingredientObj and then put it into place in the FormData.\n\nUp to my knees in spread operators.\n\nIt was literally impossible for me to keep it straight\nin my head, let alone clear in the code (it still isn't)\n\n*/\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Ingredient(props) {\n  _s();\n\n  const {\n    index,\n    item,\n    updateIngredients\n  } = props;\n  const [ingredientObj, setIngredientObj] = useState({\n    ingredient: item.ingredient,\n    quantity: item.quantity\n  });\n\n  function updateIngredientObj(e) {\n    const {\n      name,\n      value\n    } = e.target;\n    setIngredientObj({ ...ingredientObj,\n      [name]: value\n    });\n  }\n\n  useEffect(() => {\n    updateIngredients(index, ingredientObj);\n  }, [ingredientObj]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"ingredient-amount\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"ingredient\",\n      value: ingredientObj.ingredient,\n      onChange: updateIngredientObj,\n      name: \"ingredient\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"quantity\",\n      value: ingredientObj.quantity,\n      onChange: updateIngredientObj,\n      name: \"quantity\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Ingredient, \"UdUggGg1uWX+aJutNaCFwa1mRhw=\");\n\n_c = Ingredient;\n\nvar _c;\n\n$RefreshReg$(_c, \"Ingredient\");","map":{"version":3,"sources":["/home/me/lambda/updates/SFR2-Frontend/secret_family_recipes/src/components/Ingredient.js"],"names":["React","useState","useEffect","Ingredient","props","index","item","updateIngredients","ingredientObj","setIngredientObj","ingredient","quantity","updateIngredientObj","e","name","value","target"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,eAAe,SAASC,UAAT,CAAoBC,KAApB,EAA2B;AAAA;;AACxC,QAAM;AAAEC,IAAAA,KAAF;AAASC,IAAAA,IAAT;AAAeC,IAAAA;AAAf,MAAqCH,KAA3C;AACA,QAAM,CAACI,aAAD,EAAgBC,gBAAhB,IAAoCR,QAAQ,CAAC;AACjDS,IAAAA,UAAU,EAAEJ,IAAI,CAACI,UADgC;AAEjDC,IAAAA,QAAQ,EAAEL,IAAI,CAACK;AAFkC,GAAD,CAAlD;;AAKA,WAASC,mBAAT,CAA6BC,CAA7B,EAAgC;AAC9B,UAAM;AAAEC,MAAAA,IAAF;AAAQC,MAAAA;AAAR,QAAkBF,CAAC,CAACG,MAA1B;AACAP,IAAAA,gBAAgB,CAAC,EAAE,GAAGD,aAAL;AAAoB,OAACM,IAAD,GAAQC;AAA5B,KAAD,CAAhB;AACD;;AAEDb,EAAAA,SAAS,CAAC,MAAM;AACdK,IAAAA,iBAAiB,CAACF,KAAD,EAAQG,aAAR,CAAjB;AACD,GAFQ,EAEN,CAACA,aAAD,CAFM,CAAT;AAIA,sBACE;AAAK,IAAA,SAAS,EAAC,mBAAf;AAAA,4BACE;AACE,MAAA,IAAI,EAAC,MADP;AAEE,MAAA,WAAW,EAAC,YAFd;AAGE,MAAA,KAAK,EAAEA,aAAa,CAACE,UAHvB;AAIE,MAAA,QAAQ,EAAEE,mBAJZ;AAKE,MAAA,IAAI,EAAC;AALP;AAAA;AAAA;AAAA;AAAA,YADF,eAQE;AACE,MAAA,IAAI,EAAC,MADP;AAEE,MAAA,WAAW,EAAC,UAFd;AAGE,MAAA,KAAK,EAAEJ,aAAa,CAACG,QAHvB;AAIE,MAAA,QAAQ,EAAEC,mBAJZ;AAKE,MAAA,IAAI,EAAC;AALP;AAAA;AAAA;AAAA;AAAA,YARF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAkBD;;GAlCuBT,U;;KAAAA,U","sourcesContent":["import React, { useState, useEffect } from \"react\";\n/* \nSo, for this I basically gave each ingredientObj it's\nOwn Slice of State, and then whenever it's updated\nI also (with useEffect) update the state in\nthe actual form.\n\nThis is because I need to put the change in the correct\nplace in the ingredientObj, copy the ingredients array,\nand replace the correct index with ingredientObj and then put it into place in the FormData.\n\nUp to my knees in spread operators.\n\nIt was literally impossible for me to keep it straight\nin my head, let alone clear in the code (it still isn't)\n\n*/\nexport default function Ingredient(props) {\n  const { index, item, updateIngredients } = props;\n  const [ingredientObj, setIngredientObj] = useState({\n    ingredient: item.ingredient,\n    quantity: item.quantity,\n  });\n\n  function updateIngredientObj(e) {\n    const { name, value } = e.target;\n    setIngredientObj({ ...ingredientObj, [name]: value });\n  }\n\n  useEffect(() => {\n    updateIngredients(index, ingredientObj);\n  }, [ingredientObj]);\n\n  return (\n    <div className=\"ingredient-amount\">\n      <input\n        type=\"text\"\n        placeholder=\"ingredient\"\n        value={ingredientObj.ingredient}\n        onChange={updateIngredientObj}\n        name=\"ingredient\"\n      />\n      <input\n        type=\"text\"\n        placeholder=\"quantity\"\n        value={ingredientObj.quantity}\n        onChange={updateIngredientObj}\n        name=\"quantity\"\n      />\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}