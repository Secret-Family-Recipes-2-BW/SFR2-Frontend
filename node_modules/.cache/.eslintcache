[{"/home/me/lambda/updates/SFR2-Frontend/secret_family_recipes/src/index.js":"1","/home/me/lambda/updates/SFR2-Frontend/secret_family_recipes/src/App.js":"2","/home/me/lambda/updates/SFR2-Frontend/secret_family_recipes/src/reducers/rootReducer.js":"3","/home/me/lambda/updates/SFR2-Frontend/secret_family_recipes/src/components/LogOutPage.js":"4","/home/me/lambda/updates/SFR2-Frontend/secret_family_recipes/src/components/Header.js":"5","/home/me/lambda/updates/SFR2-Frontend/secret_family_recipes/src/components/RedirectRoute.js":"6","/home/me/lambda/updates/SFR2-Frontend/secret_family_recipes/src/components/Login.js":"7","/home/me/lambda/updates/SFR2-Frontend/secret_family_recipes/src/components/PrivateRoute.js":"8","/home/me/lambda/updates/SFR2-Frontend/secret_family_recipes/src/components/Allrecipes.js":"9","/home/me/lambda/updates/SFR2-Frontend/secret_family_recipes/src/components/Signup.js":"10","/home/me/lambda/updates/SFR2-Frontend/secret_family_recipes/src/components/UserRecipes.js":"11","/home/me/lambda/updates/SFR2-Frontend/secret_family_recipes/src/reducers/accountReducer.js":"12","/home/me/lambda/updates/SFR2-Frontend/secret_family_recipes/src/reducers/recipesReducer.js":"13","/home/me/lambda/updates/SFR2-Frontend/secret_family_recipes/src/actions/accountActions.js":"14","/home/me/lambda/updates/SFR2-Frontend/secret_family_recipes/src/components/RecipeCard.js":"15","/home/me/lambda/updates/SFR2-Frontend/secret_family_recipes/src/components/RecipeForm.js":"16","/home/me/lambda/updates/SFR2-Frontend/secret_family_recipes/src/actions/recipesActions.js":"17","/home/me/lambda/updates/SFR2-Frontend/secret_family_recipes/src/utils/axiosWithAuth.js":"18","/home/me/lambda/updates/SFR2-Frontend/secret_family_recipes/src/components/validation/validationSchema.js":"19","/home/me/lambda/updates/SFR2-Frontend/secret_family_recipes/src/components/tempData.js":"20","/home/me/lambda/updates/SFR2-Frontend/secret_family_recipes/src/components/EditForm.js":"21","/home/me/lambda/updates/SFR2-Frontend/secret_family_recipes/src/components/validation/RecipeSchema.js":"22","/home/me/lambda/updates/SFR2-Frontend/secret_family_recipes/src/components/Ingredient.js":"23"},{"size":811,"mtime":1620408722603,"results":"24","hashOfConfig":"25"},{"size":1441,"mtime":1620408722603,"results":"26","hashOfConfig":"25"},{"size":213,"mtime":1620408722603,"results":"27","hashOfConfig":"25"},{"size":447,"mtime":1620408722603,"results":"28","hashOfConfig":"25"},{"size":1068,"mtime":1620408722603,"results":"29","hashOfConfig":"25"},{"size":192,"mtime":1620408722603,"results":"30","hashOfConfig":"25"},{"size":3588,"mtime":1620408722603,"results":"31","hashOfConfig":"25"},{"size":253,"mtime":1620408722603,"results":"32","hashOfConfig":"25"},{"size":1361,"mtime":1620408722603,"results":"33","hashOfConfig":"25"},{"size":3622,"mtime":1620408722603,"results":"34","hashOfConfig":"25"},{"size":1941,"mtime":1620408722603,"results":"35","hashOfConfig":"25"},{"size":580,"mtime":1620408722603,"results":"36","hashOfConfig":"25"},{"size":924,"mtime":1620408722603,"results":"37","hashOfConfig":"25"},{"size":339,"mtime":1620408722603,"results":"38","hashOfConfig":"25"},{"size":3646,"mtime":1620408722603,"results":"39","hashOfConfig":"25"},{"size":5597,"mtime":1620408722603,"results":"40","hashOfConfig":"25"},{"size":1678,"mtime":1620408722603,"results":"41","hashOfConfig":"25"},{"size":251,"mtime":1620408722603,"results":"42","hashOfConfig":"25"},{"size":372,"mtime":1620408722603,"results":"43","hashOfConfig":"25"},{"size":2819,"mtime":1620408722603,"results":"44","hashOfConfig":"25"},{"size":5972,"mtime":1620408722603,"results":"45","hashOfConfig":"25"},{"size":795,"mtime":1620408722603,"results":"46","hashOfConfig":"25"},{"size":1454,"mtime":1620408722603,"results":"47","hashOfConfig":"25"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50"},"1x3z3gt",{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"72","messages":"73","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"84","messages":"85","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"98","messages":"99","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"103","messages":"104","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105"},"/home/me/lambda/updates/SFR2-Frontend/secret_family_recipes/src/index.js",["106"],"import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport { createStore, applyMiddleware } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport thunk from \"redux-thunk\";\nimport logger from \"redux-logger\";\nimport rootReducer from \"./reducers/rootReducer\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport \"./index.css\";\n\nconst store = createStore(rootReducer, applyMiddleware(thunk));\n\nReactDOM.render(\n  <Router>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </Router>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n","/home/me/lambda/updates/SFR2-Frontend/secret_family_recipes/src/App.js",["107"],"import React, { useEffect } from \"react\";\nimport \"./styles/styles.scss\";\nimport Signup from \"./components/Signup\";\nimport Login from \"./components/Login\";\nimport Header from \"./components/Header.js\";\nimport PrivateRoute from \"./components/PrivateRoute\";\nimport { Route, Switch } from \"react-router-dom\";\nimport LogOutPage from \"./components/LogOutPage.js\";\nimport { setLoggedIn, setLoggedOut } from \"./actions/accountActions\";\nimport RedirectRoute from \"./components/RedirectRoute\";\nimport { connect } from \"react-redux\";\nimport AllRecipes from \"./components/Allrecipes\";\n\nimport UserRecipes from \"./components/UserRecipes\";\n\n\nfunction App(props) {\n  useEffect(() => {\n    if (localStorage.getItem(\"token\")) {\n      props.setLoggedIn();\n    } else {\n      props.setLoggedOut();\n    }\n  }, []);\n  return (\n    <div className=\"App\">\n      <header>\n        <Header />\n      </header>\n      <Switch>\n        <RedirectRoute exact path=\"/\" />\n\n        <PrivateRoute exact path=\"/recipes\" component={UserRecipes} />\n\n        <Route path=\"/login\" component={Login} />\n        <Route path=\"/signup\" component={Signup} />\n        <Route path=\"/logout\" component={LogOutPage} />\n        <Route path=\"/allrecipes\" component={AllRecipes} />\n      </Switch>\n    </div>\n  );\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    loggedIn: state.accountReducer.loggedIn,\n  };\n};\nexport default connect(mapStateToProps, { setLoggedIn, setLoggedOut })(App);\n","/home/me/lambda/updates/SFR2-Frontend/secret_family_recipes/src/reducers/rootReducer.js",[],"/home/me/lambda/updates/SFR2-Frontend/secret_family_recipes/src/components/LogOutPage.js",["108"],"import { useEffect } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport { setLoggedOut } from \"../actions/accountActions\";\n\nconst LogOutPage = (props) => {\n  const history = useHistory();\n\n  useEffect(() => {\n    localStorage.removeItem(\"token\");\n    props.setLoggedOut();\n    history.push(\"/login\");\n  }, []);\n\n  return null;\n};\n\nexport default connect(null, { setLoggedOut })(LogOutPage);\n","/home/me/lambda/updates/SFR2-Frontend/secret_family_recipes/src/components/Header.js",[],"/home/me/lambda/updates/SFR2-Frontend/secret_family_recipes/src/components/RedirectRoute.js",["109"],"import React from \"react\";\nimport { Route, Redirect } from \"react-router-dom\";\n\nexport default ( { children, ...rest } ) => <Route { ...rest } render = { () => <Redirect to = \"/login\" /> } />;","/home/me/lambda/updates/SFR2-Frontend/secret_family_recipes/src/components/Login.js",["110","111"],"import React, { useState, useEffect } from \"react\";\nimport * as yup from \"yup\";\nimport validationSchema from \"./validation/validationSchema\";\nimport { axiosWithAuth } from \"../utils/axiosWithAuth\";\nimport { useHistory, Link } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport { setLoggedIn, setLoggedOut, setUser } from \"../actions/accountActions\";\n\n\nconst initialFormValues = {\n  username: \"\",\n  password: \"\",\n};\n\nconst initialFormErrors = {\n  username: \"\",\n  password: \"\",\n};\n\nconst initialDisabled = true;\n\nfunction LoginForm(props) {\n  const [login, setLogin] = useState(initialFormValues);\n  const [errors, setErrors] = useState(initialFormErrors);\n  const [disabled, setDisabled] = useState(initialDisabled);\n  const [doesntExist, setDoesntExist] = useState(false);\n  const history = useHistory();\n\n\n\nuseEffect(()=>{\n  setLoggedIn()\n  setLoggedOut()\n},[])\n\n\n  // FORM FUNCTIONS\n  const onLoginSubmit = (evt) => {\n    evt.preventDefault();\n    axiosWithAuth()\n      .post(\"/api/users/login \", login)\n      .then((res) => {\n        props.setLoggedIn();\n        localStorage.setItem(\"token\", res.data.data.token);\n        props.setUser(res.data.data.user)\n        history.push(\"/recipes\");\n      })\n      .catch((err) => {\n        console.log(\"error happend with post request\", err);\n\n        setDoesntExist(true);\n      });\n\n    const userLogin = {\n      username: login.username.trim(),\n      password: login.password.trim(),\n    };\n  };\n\n  // YUP VALIDATIONS\n  const inputChange = (evt) => {\n    const { name, value } = evt.target;\n    yup\n      .reach(validationSchema, name)\n      .validate(value)\n      .then((valid) => {\n        setErrors({\n          ...errors,\n          [name]: \"\",\n        });\n      })\n      .catch((err) => {\n        setErrors({\n          ...errors,\n          [name]: err.errors[0],\n        });\n      });\n\n    setLogin({\n      ...login,\n      [name]: value,\n    });\n  };\n \n  useEffect(() => {\n    validationSchema.isValid(login).then((valid) => {\n      setDisabled(!valid);\n    });\n  }, [login]);\n\n  return (\n    <form className=\"formContainerLogin\" onSubmit={onLoginSubmit}>\n      \n      <div className='formContent'>\n      <div>\n        <h2 className=\"signUpTitle\">\n          Login for\n          <br />\n          <span className=\"appName\">Secret Family Recipe</span>\n        </h2>\n        {doesntExist === false ? null : (\n          <p className=\"error\">Username doesnt exist!</p>\n        )}\n      </div>\n      <div className=\"error container\">\n        <div className=\"error\">{errors.first_name}</div>\n        <div className=\"error\">{errors.password}</div>\n      </div>\n\n      <div className=\"formInputs\">\n        <label className=\"inputLabels\">\n          Username:&nbsp;\n          <input\n            name=\"username\"\n            type=\"text\"\n            placeholder=\"username\"\n            value={login.username}\n            onChange={inputChange}\n          />\n        </label>\n\n        <label className=\"inputLabels\">\n          Password:&nbsp;\n          <input\n            name=\"password\"\n            type=\"password\"\n            placeholder=\"******\"\n            value={login.password}\n            onChange={inputChange}\n          />\n        </label>\n      </div>\n      <div className=\"formSubmitContainer\">\n        <button id=\"submitBtn\" disabled={disabled}>\n          Login\n        </button>\n      </div>\n      </div>\n    </form>\n  );\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    loggedIn: state.accountReducer.loggedIn,\n  };\n};\nexport default connect(mapStateToProps, { setLoggedIn, setLoggedOut, setUser })(\n  LoginForm\n);\n","/home/me/lambda/updates/SFR2-Frontend/secret_family_recipes/src/components/PrivateRoute.js",["112"],"import React from \"react\";\nimport { Route, Redirect } from \"react-router-dom\";\n\nexport default ( { component: Component, ...rest } ) => <Route { ...rest } render = { () => localStorage.getItem( \"token\" ) ? <Component /> : <Redirect to = \"/login\" /> } />","/home/me/lambda/updates/SFR2-Frontend/secret_family_recipes/src/components/Allrecipes.js",[],"/home/me/lambda/updates/SFR2-Frontend/secret_family_recipes/src/components/Signup.js",["113","114","115","116"],"import React, { useState, useEffect } from \"react\";\nimport * as yup from \"yup\";\nimport validationSchema from \"./validation/validationSchema\";\nimport { axiosWithAuth } from \"../utils/axiosWithAuth\";\nimport { useHistory, Link } from \"react-router-dom\";\nimport { setLoggedIn, setLoggedOut } from \"../actions/accountActions\";\nimport { connect } from \"react-redux\";\n\n\nconst initialFormValues = {\n  username: \"\",\n  password: \"\",\n};\n\nconst initialFormErrors = {\n  username: \"\",\n  password: \"\",\n};\n\nconst initialUser = [];\nconst initialDisabled = true;\n\n  function SignupForm(props) {\n  const [users, setUsers] = useState(initialUser);\n  const [formValues, setFormValues] = useState(initialFormValues);\n  const [errors, setErrors] = useState(initialFormErrors);\n  const [disabled, setDisabled] = useState(initialDisabled);\n  const history = useHistory();\n  const [loginExists, setLoginExists] = useState(false);\n\n\n  // FORM FUNCTIONS\n  const onSubmit = (evt) => {\n    evt.preventDefault();\n    axiosWithAuth()\n      .post(\"/api/users/register\", formValues)\n      .then((res) => {\n        props.setLoggedIn()\n        localStorage.setItem(\"token\", res.data.data.token);\n        history.push(\"/recipes\");\n      })\n      .catch(error=>{\n        setLoginExists(true);\n      })\n    const newUser = {\n      username: formValues.username.trim(),\n      password: formValues.password.trim(),\n    };\n  };\n\n  // YUP VALIDATIONS\n  const inputChange = (evt) => {\n    const { name, value } = evt.target;\n\n    yup\n      .reach(validationSchema, name)\n      .validate(value)\n      .then((valid) => {\n        setErrors({\n          ...errors,\n          [name]: \"\",\n        });\n      })\n      .catch((err) => {\n        setErrors({\n          ...errors,\n          [name]: err.errors[0],\n        });\n      });\n\n    setFormValues({\n      ...formValues,\n      [name]: value,\n    });\n  };\n\n  useEffect(() => {\n    validationSchema.isValid(formValues).then((valid) => {\n      setDisabled(!valid);\n    });\n  }, [formValues]);\n\n  return (\n    <>\n      <form className=\"formContainer\" onSubmit={onSubmit}>\n        <div className='formContent'>\n\n        <div>\n          <h2 className=\"signUpTitle\">\n            Sign Up for <br />\n            <span className=\"appName\">Secret Family Recipe</span>\n          </h2>\n          {loginExists === false ? null : (\n          <p className=\"error\">Username is already taken. Try Again!</p>\n        )}\n        </div>\n        <div className=\"error container\">\n          <div className=\"error\">{errors.first_name}</div>\n          <div className=\"error\">{errors.password}</div>\n        </div>\n\n        <div className=\"formInputs\">\n          <label className=\"inputLabels\">\n            Username:&nbsp;\n            <input\n              name=\"username\"\n              type=\"text\"\n              placeholder=\"username\"\n              value={formValues.username}\n              onChange={inputChange}\n            />\n          </label>\n\n          <label className=\"inputLabels\">\n            Password:&nbsp;\n            <input\n              name=\"password\"\n              type=\"password\"\n              placeholder=\"******\"\n              value={formValues.password}\n              onChange={inputChange}\n            />\n          </label>\n        </div>\n        <div className=\"formSubmitContainer\">\n          <button id=\"submitBtn\" disabled={disabled}>\n            Register\n          </button>\n        </div>\n        </div>\n      </form>\n    </>\n  );\n}\n\n\n\nconst mapStateToProps = (state) => {\n  return {\n    loggedIn: state.accountReducer.loggedIn,\n  };\n};\nexport default connect(mapStateToProps, { setLoggedIn, setLoggedOut })(SignupForm);","/home/me/lambda/updates/SFR2-Frontend/secret_family_recipes/src/components/UserRecipes.js",["117","118","119"],"import React, { useState, useEffect } from \"react\";\nimport RecipeCard from './RecipeCard';\nimport axios from \"axios\";\nimport { getRecipes } from \"../actions/recipesActions\";\nimport { connect } from \"react-redux\";\nimport { axiosWithAuth } from \"../utils/axiosWithAuth\";\nimport RecipeForm from './RecipeForm';\n\n\nfunction UserRecipes(props) {\n  // const [userRecipeList, setUserRecipeList] = useState([]);\n  const [filteredList, setFilteredList] = useState([]);\n  const [searchTerm, setSearchTerm] = useState('');\n\n  useEffect(() => {\n    props.getRecipes(props.user.id);\n    \n  }, []);\n\nconst handleChange = (evt) => {\n  setSearchTerm(evt.target.value.toLowerCase());\n}\n\nuseEffect(()=> {\nlet currentList = [];\nlet newList = [];\n\nif(searchTerm !== ''){\n  currentList = props.recipes;\n  newList = currentList.filter(item => {\n    let listItem = item.title.toLowerCase();\n    return listItem.includes(searchTerm);\n  });\n}else {\n    newList = props.recipes; \n};\n  setFilteredList(newList);\n}, [searchTerm, props.recipes])\n\n  return (\n    <>\n    <div className='searchContainer'>\n        <input\n          type=\"text\"\n          value={searchTerm}\n          placeholder=\"Search by keyword\"\n          onChange={handleChange}\n          className=\"searchBar\"\n        />\n      </div>\n      \n      <div className=\"userRecipes container\">\n        {filteredList.map((item) => {\n          return (\n            <RecipeCard\n              editable={true}\n              item={item}\n              key={item.id}\n              makingChanges={props.makingChanges}\n            />\n          );\n        })}\n      </div>\n\n      <div className=\"recipe form\">\n        <RecipeForm />\n      </div>\n    </>\n  );\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    recipes: state.recipesReducer.recipes,\n    makingChanges: state.recipesReducer.makingChanges,\n    user: state.accountReducer.user\n  };\n};\n\nexport default connect(mapStateToProps, { getRecipes })(UserRecipes);","/home/me/lambda/updates/SFR2-Frontend/secret_family_recipes/src/reducers/accountReducer.js",[],"/home/me/lambda/updates/SFR2-Frontend/secret_family_recipes/src/reducers/recipesReducer.js",[],"/home/me/lambda/updates/SFR2-Frontend/secret_family_recipes/src/actions/accountActions.js",[],"/home/me/lambda/updates/SFR2-Frontend/secret_family_recipes/src/components/RecipeCard.js",["120","121","122","123","124","125","126"],"\nimport React, { useState } from \"react\";\nimport EditForm from \"./EditForm\";\nimport { connect } from \"react-redux\";\nimport { deleteRecipes, editRecipes } from \"../actions/recipesActions\";\nimport { tempData } from './tempData'\nimport {\n  Accordion,\n  AccordionSummary,\n  AccordionDetails,\n} from \"@material-ui/core\";\n\n\n// Lynda\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\n\nfunction RecipeCard(props) \n{\n  let { image_url, title, categories, source, ingredients, id, instructions } =  props.item; //pass editable as true to have an edit button\n\n\n  const {editable} = props;\n  const [edit, setEdit] = useState(false);\n\n  const [ open, setOpen ] = React.useState( false );\n\n  const handleClickOpen = () => { setOpen( true ); };\n\n  const handleClose = () => { setOpen( false ); };\n  \n  const deleteRecipe = id => { props.deleteRecipes( id ); }\n\n\n\n  const [ formValues, setFormValues ] = useState( { title, source } );\n\n  const onChange = e => { setFormValues( { ...formValues, [ e.target.name ]: e.target.value } );\n                        console.log( formValues ) };\n\n  const editRecipe = id => \n  { \n    props.editRecipes( id, formValues );\n    handleClose(); \n  }\n\n  return (\n    <>\n      <Dialog open={open} onClose={handleClose} aria-labelledby=\"form-dialog-title\">\n        <DialogTitle id=\"form-dialog-title\">Edit Recipe</DialogTitle>\n        <DialogContent>\n\n          <TextField\n            margin = \"dense\"\n            label = \"Recipe Name\"\n            type = \"text\"\n            name = \"title\"\n            value = { formValues.title }\n            onChange = { onChange }\n            fullWidth\n          />\n\n          <TextField\n            margin = \"dense\"\n            label = \"Source\"\n            type = \"text\"\n            name = \"source\"\n            value = { formValues.source }\n            onChange = { onChange }\n            fullWidth\n          />\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleClose} color=\"primary\">\n            Cancel\n          </Button>\n          <Button onClick = { () => editRecipe( id ) } color=\"primary\">\n            Save Changes\n          </Button>\n        </DialogActions>\n      </Dialog>\n\n      <Accordion className=\"recipe-card\">\n      <AccordionSummary>\n        {/* {(image_url != '' && \n          image_url != undefined) &&\n          <img src={image_url} alt={\"picture of \" + title} />\n        } */}\n        <h3>\n          { formValues.title }, from <span className=\"card-source\">{ formValues.source }</span>\n        </h3>\n      </AccordionSummary>\n      <AccordionDetails>\n        <div className=\"card-ingredients\">\n          <ul>\n            {ingredients &&\n              ingredients.map((i, index) => {\n                return (\n                  <li key={index}>\n                    {i.quantity}, {i.ingredient}\n                  </li>\n                );\n              })}\n          </ul>\n        </div>\n\n        <p>instructions{instructions}</p>\n        { editable && <Button variant=\"outlined\" color=\"primary\" onClick={ handleClickOpen } > Edit </Button> }\n        { editable && <Button variant=\"outlined\" color=\"primary\" onClick={ () => deleteRecipe( id ) } > Delete</Button> }\n\n      </AccordionDetails>\n    </Accordion>\n  </>\n  );\n}\n\nexport default connect( null, { deleteRecipes, editRecipes } )( RecipeCard );","/home/me/lambda/updates/SFR2-Frontend/secret_family_recipes/src/components/RecipeForm.js",["127"],"import React, { useState, useEffect } from \"react\";\nimport * as yup from \"yup\";\n\nimport recipeSchema from \"./validation/RecipeSchema\";\nimport Ingredient from \"./Ingredient\";\nimport { addRecipes } from \"../actions/recipesActions\";\nimport { connect } from \"react-redux\";\n\nconst defaultIngredientObj = { ingredient: \"\", quantity: \"\" };\n\nconst defaultData = {\n  private: false,\n  image_url: \"\",\n  title: \"\",\n  categories: [\"\"],\n  source: \"\",\n  ingredients: [defaultIngredientObj],\n  instructions: [\"\"],\n};\n\nfunction RecipeForm(props) {\n  const [formData, setFormData] = useState(defaultData);\n  const [formErrors, setFormErrors] = useState([\"\"]);\n  const [disabled, setDisabled] = useState(false);\n  const { setEdit } = props;\n\n  function updateFormArray(e, index) {\n    const { name, value } = e.target;\n    const newArr = [...formData[name]];\n    newArr[index] = value;\n    throwErrors(name, value);\n    setFormData({...formData, [name]: newArr})\n  }\n\n  function updateForm(e) {\n    const { name, value } = e.target;\n    throwErrors(name, value);\n    setFormData({ ...formData, [name]: value });\n  }\n  ///Add ingredient input field\n  function addIngredient(e) {\n    e.preventDefault();\n    setFormData({\n      ...formData,\n      ingredients: [...formData.ingredients, defaultIngredientObj],\n    });\n  }\n\n  function addCategory(e) {\n    e.preventDefault();\n    setFormData({ ...formData, categories: [...formData.categories, \"\"] });\n  }\n\n  ///get an updated array of ingredients without manipulating state\n  function newIngredients(ingredientObj, index) {\n    const result = [...formData.ingredients];\n    result[index] = ingredientObj;\n    return result;\n  }\n  ///actually change the ingredients array in the form\n  function updateIngredients(index, ingredientObj) {\n    const updatedIngredients = newIngredients(ingredientObj, index);\n    throwErrors('ingredients', updatedIngredients)\n    setFormData({\n      ...formData,\n      ingredients: updatedIngredients\n    });\n  }\n  //watch for changes to ingredientObj, and update the formData with it\n\n  //VALIDATION\n  const throwErrors = (name, value) => {\n    yup\n      .reach(recipeSchema, name)\n      .validate(value)\n      .then((valid) => {\n        setFormErrors({\n          ...formErrors,\n          [name]: \"\",\n        })\n      })\n      .catch((err) => {\n        setFormErrors({\n          ...formErrors,\n          [name]: err.errors[0],\n        });\n      });\n  };\n\n  //catch changes and validate. Disable/Enable submit button accordingly\n  useEffect(() => {\n    recipeSchema.isValid(formData).then((valid) => {\n      setDisabled(!valid);\n    });\n  }, [formData]);\n  //END VALIDATION\n\n  //Network Request\n  function submit(e) {\n    e.preventDefault();\n    props.addRecipes(formData);\n    setFormData(defaultData)\n    // setEdit(false);\n  }\n\n  return (\n    <form className=\"recipeform\">\n      <div className=\"meta\">\n        <h2>Add a Recipe</h2> \n        <label>\n          Recipe Title:&nbsp;\n          <input\n            type=\"text\"\n            name=\"title\"\n            value={formData.title}\n            onChange={updateForm}\n          />\n        </label>\n        <label>Source:&nbsp;\n          <input \n            type=\"text\"\n            name=\"source\"\n            value={formData.source}\n            onChange={updateForm}\n          />\n        </label>\n        <label>\n          Categories:&nbsp;\n          {formData.categories.map((item, index) => {\n            return (\n              <input\n                type=\"text\"\n                name=\"categories\"\n                value={formData.categories[index]}\n                onChange={(e) => updateFormArray(e, index)}\n                key={index}\n              />\n            );\n          })}\n          <button onClick={addCategory}>Add</button>\n        </label>\n      </div>\n      <div className=\"ingredients\">\n        <label className=\"ingredLabel\">\n          Ingredients:&nbsp;\n          {/*<Ingredient />*/}\n          {formData.ingredients.map((item, index) => {\n            return (\n              <Ingredient\n                item={item}\n                updateForm={updateForm}\n                key={index}\n                index={index}\n                updateIngredients={updateIngredients}\n              />\n            );\n          })}\n          <button onClick={addIngredient}>Add</button>\n        </label>\n      </div>\n      <div className=\"instructions\">\n        <label>\n          Instructions:&nbsp;\n          <textarea\n            rows=\"7\"\n            cols=\"70\"\n            name=\"instructions\"\n            value={formData.instructions[0]}\n            onChange={(e) => updateFormArray(e, 0)}\n          />\n        </label>\n      </div>\n      <div className=\"submission\">\n        <h3>Sharing:</h3>\n        <label>\n          Public:&nbsp;\n          <input\n            name=\"shared\"\n            type=\"radio\"\n            checked={formData.private}\n            onChange={() => setFormData({ ...formData, private: true })}\n          />\n        </label>\n        <label> \n          <div className=\"sharing\">\n            Private:&nbsp;\n            <input\n              name=\"shared\"\n              type=\"radio\"\n              checked={!formData.private}\n              onChange={() => setFormData({ ...formData, private: false })}\n            />\n          </div>\n        </label>\n      </div>\n      <p>{formErrors.title}</p>\n      <p>{formErrors.categories}</p>\n      <p>{formErrors.ingredients}</p>\n      <p>{formErrors.instructions}</p>\n\n      <button disabled={disabled} onClick={submit}>\n        Add Recipe\n      </button>\n    </form>\n  );\n}\n\nexport default connect(null, { addRecipes })(RecipeForm);\n","/home/me/lambda/updates/SFR2-Frontend/secret_family_recipes/src/actions/recipesActions.js",[],"/home/me/lambda/updates/SFR2-Frontend/secret_family_recipes/src/utils/axiosWithAuth.js",[],"/home/me/lambda/updates/SFR2-Frontend/secret_family_recipes/src/components/validation/validationSchema.js",[],"/home/me/lambda/updates/SFR2-Frontend/secret_family_recipes/src/components/tempData.js",[],"/home/me/lambda/updates/SFR2-Frontend/secret_family_recipes/src/components/EditForm.js",["128"],"import React, { useState, useEffect } from \"react\";\nimport * as yup from \"yup\";\n\nimport recipeSchema from \"./validation/RecipeSchema\";\nimport Ingredient from \"./Ingredient\";\nimport { addRecipes } from \"../actions/recipesActions\";\nimport { connect } from \"react-redux\";\n\nconst defaultIngredientObj = { ingredient: \"\", quantity: \"\" };\n\nconst defaultData = {\n  private: false,\n  image_url: \"\",\n  title: \"\",\n  categories: [\"\"],\n  source: \"\",\n  ingredients: [],\n  instructions: [\"\"],\n};\n\nfunction RecipeForm(props) {\n\n  console.log( \"HERE\" );\n  const [formData, setFormData] = useState(defaultData);\n  const [formErrors, setFormErrors] = useState([\"\"]);\n  const [disabled, setDisabled] = useState(false);\n  const { setEdit } = props;\n \n  useEffect(() => {\n    setFormData({private: props.private,\n                 title: props.title,\n                 categories: props.categories,\n                 source: props.source,\n                 ingredients: props.ingredients,\n                 instructions: props.instructions,\n  })}, [])\n\n  function updateFormArray(e, index) {\n    const { name, value } = e.target;\n    const newArr = [...formData[name]];\n    newArr[index] = value;\n\n    throwErrors(name, value);\n    setFormData({...formData, [name]: newArr})\n\n  }\n\n  function updateForm(e) {\n    const { name, value } = e.target;\n    throwErrors(name, value);\n    setFormData({ ...formData, [name]: value });\n  }\n  ///Add ingredient input field\n  function addIngredient(e) {\n    e.preventDefault();\n    setFormData({\n      ...formData,\n      ingredients: [...formData.ingredients, defaultIngredientObj],\n    });\n  }\n\n  function addCategory(e) {\n    e.preventDefault();\n    setFormData({ ...formData, categories: [...formData.categories, \"\"] });\n  }\n\n  ///get an updated array of ingredients without manipulating state\n  function newIngredients(ingredientObj, index) {\n    const result = [...formData.ingredients];\n    result[index] = ingredientObj;\n    return result;\n  }\n  ///actually change the ingredients array in the form\n  function updateIngredients(index, ingredientObj) {\n    const updatedIngredients = newIngredients(ingredientObj, index);\n    throwErrors('ingredients', updatedIngredients)\n    setFormData({\n      ...formData,\n      ingredients: updatedIngredients\n    });\n  }\n  //watch for changes to ingredientObj, and update the formData with it\n\n  //VALIDATION\n  const throwErrors = (name, value) => {\n    yup\n      .reach(recipeSchema, name)\n      .validate(value)\n      .then((valid) => {\n        setFormErrors({\n          ...formErrors,\n          [name]: \"\",\n        })\n      })\n      .catch((err) => {\n        console.log(err);\n        setFormErrors({\n          ...formErrors,\n          [name]: err.errors[0],\n        });\n      });\n  };\n\n  //catch changes and validate. Disable/Enable submit button accordingly\n  useEffect(() => {\n    recipeSchema.isValid(formData).then((valid) => {\n      setDisabled(!valid);\n    });\n  }, [formData]);\n  //END VALIDATION\n\n  //Network Request\n  function submit(e) {\n    e.preventDefault();\n    props.addRecipes(formData);\n    setEdit(false);\n  }\n\n  return (\n    <form className=\"recipeform\">\n      <div className=\"meta\">\n        <h2>Add a Recipe</h2> \n        <label>\n          Recipe Title:&nbsp;\n          <input\n            type=\"text\"\n            name=\"title\"\n            value={formData.title}\n            onChange={updateForm}\n          />\n        </label>\n        <label>Source:&nbsp;\n          <input \n            type=\"text\"\n            name=\"source\"\n            value={formData.source}\n            onChange={updateForm}\n          />\n        </label>\n        <label>\n          Categories:&nbsp;\n          {formData.categories &&\n           formData.categories.map((item, index) => {\n            return (\n              <input\n                type=\"text\"\n                name=\"categories\"\n                value={formData.categories[index]}\n                onChange={(e) => updateFormArray(e, index)}\n                key={index}\n              />\n            );\n          })}\n          <button onClick={addCategory}>Add</button>\n        </label>\n      </div>\n      <div className=\"ingredients\">\n        <label>\n          Ingredients:&nbsp;\n          {/*<Ingredient />*/}\n          {formData.ingredients &&\n           formData.ingredients.map((item, index) => {\n            return (\n              <Ingredient\n                item={item}\n                updateForm={updateForm}\n                add={addIngredient}\n                key={index}\n                index={index}\n                updateIngredients={updateIngredients}\n              />\n            );\n          })}\n          <button onClick={addIngredient}>Add</button>\n        </label>\n      </div>\n      <div className=\"instructions\">\n        <label>\n          Instructions:&nbsp;\n          <textarea\n            rows=\"7\"\n            cols=\"70\"\n            name=\"instructions\"\n            value={formData.instructions[0]}\n            onChange={(e) => updateFormArray(e, 0)}\n          />\n        </label>\n      </div>\n      <div className=\"submission\">\n        <h3>Sharing:</h3>\n        <label>\n          Public:&nbsp;\n          <input\n            name=\"shared\"\n            type=\"radio\"\n            checked={formData.private}\n            onChange={() => setFormData({ ...formData, private: true })}\n          />\n        </label>\n        <label> \n          <div className=\"sharing\">\n            Private:&nbsp;\n            <input\n              name=\"shared\"\n              type=\"radio\"\n              checked={!formData.private}\n              onChange={() => setFormData({ ...formData, private: false })}\n            />\n          </div>\n        </label>\n      </div>\n      <p>{formErrors.title}</p>\n      <p>{formErrors.categories}</p>\n      <p>{formErrors.ingredients}</p>\n      <p>{formErrors.instructions}</p>\n\n      <button disabled={disabled} onClick={submit}>\n        Submit\n      </button>\n    </form>\n  );\n}\n\nexport default connect(null, { addRecipes })(RecipeForm);","/home/me/lambda/updates/SFR2-Frontend/secret_family_recipes/src/components/validation/RecipeSchema.js",[],"/home/me/lambda/updates/SFR2-Frontend/secret_family_recipes/src/components/Ingredient.js",["129"],"import React, { useState, useEffect } from \"react\";\n/* \nSo, for this I basically gave each ingredientObj it's\nOwn Slice of State, and then whenever it's updated\nI also (with useEffect) update the state in\nthe actual form.\n\nThis is because I need to put the change in the correct\nplace in the ingredientObj, copy the ingredients array,\nand replace the correct index with ingredientObj and then put it into place in the FormData.\n\nUp to my knees in spread operators.\n\nIt was literally impossible for me to keep it straight\nin my head, let alone clear in the code (it still isn't)\n\n*/\nexport default function Ingredient(props) {\n  const { index, item, updateIngredients } = props;\n  const [ingredientObj, setIngredientObj] = useState({\n    ingredient: item.ingredient,\n    quantity: item.quantity,\n  });\n\n  function updateIngredientObj(e) {\n    const { name, value } = e.target;\n    setIngredientObj({ ...ingredientObj, [name]: value });\n  }\n\n  useEffect(() => {\n    updateIngredients(index, ingredientObj);\n  }, [ingredientObj]);\n\n  return (\n    <div className=\"ingredient-amount\">\n      <input\n        type=\"text\"\n        placeholder=\"ingredient\"\n        value={ingredientObj.ingredient}\n        onChange={updateIngredientObj}\n        name=\"ingredient\"\n      />\n      <input\n        type=\"text\"\n        placeholder=\"quantity\"\n        value={ingredientObj.quantity}\n        onChange={updateIngredientObj}\n        name=\"quantity\"\n      />\n    </div>\n  );\n}\n",{"ruleId":"130","severity":1,"message":"131","line":7,"column":8,"nodeType":"132","messageId":"133","endLine":7,"endColumn":14},{"ruleId":"134","severity":1,"message":"135","line":24,"column":6,"nodeType":"136","endLine":24,"endColumn":8,"suggestions":"137"},{"ruleId":"134","severity":1,"message":"138","line":13,"column":6,"nodeType":"136","endLine":13,"endColumn":8,"suggestions":"139"},{"ruleId":"140","severity":1,"message":"141","line":4,"column":1,"nodeType":"142","endLine":4,"endColumn":113},{"ruleId":"130","severity":1,"message":"143","line":5,"column":22,"nodeType":"132","messageId":"133","endLine":5,"endColumn":26},{"ruleId":"130","severity":1,"message":"144","line":54,"column":11,"nodeType":"132","messageId":"133","endLine":54,"endColumn":20},{"ruleId":"140","severity":1,"message":"141","line":4,"column":1,"nodeType":"142","endLine":4,"endColumn":174},{"ruleId":"130","severity":1,"message":"143","line":5,"column":22,"nodeType":"132","messageId":"133","endLine":5,"endColumn":26},{"ruleId":"130","severity":1,"message":"145","line":24,"column":10,"nodeType":"132","messageId":"133","endLine":24,"endColumn":15},{"ruleId":"130","severity":1,"message":"146","line":24,"column":17,"nodeType":"132","messageId":"133","endLine":24,"endColumn":25},{"ruleId":"130","severity":1,"message":"147","line":45,"column":11,"nodeType":"132","messageId":"133","endLine":45,"endColumn":18},{"ruleId":"130","severity":1,"message":"148","line":3,"column":8,"nodeType":"132","messageId":"133","endLine":3,"endColumn":13},{"ruleId":"130","severity":1,"message":"149","line":6,"column":10,"nodeType":"132","messageId":"133","endLine":6,"endColumn":23},{"ruleId":"134","severity":1,"message":"135","line":18,"column":6,"nodeType":"136","endLine":18,"endColumn":8,"suggestions":"150"},{"ruleId":"130","severity":1,"message":"151","line":3,"column":8,"nodeType":"132","messageId":"133","endLine":3,"endColumn":16},{"ruleId":"130","severity":1,"message":"152","line":6,"column":10,"nodeType":"132","messageId":"133","endLine":6,"endColumn":18},{"ruleId":"130","severity":1,"message":"153","line":20,"column":8,"nodeType":"132","messageId":"133","endLine":20,"endColumn":25},{"ruleId":"130","severity":1,"message":"154","line":25,"column":9,"nodeType":"132","messageId":"133","endLine":25,"endColumn":18},{"ruleId":"130","severity":1,"message":"155","line":25,"column":27,"nodeType":"132","messageId":"133","endLine":25,"endColumn":37},{"ruleId":"130","severity":1,"message":"156","line":29,"column":10,"nodeType":"132","messageId":"133","endLine":29,"endColumn":14},{"ruleId":"130","severity":1,"message":"157","line":29,"column":16,"nodeType":"132","messageId":"133","endLine":29,"endColumn":23},{"ruleId":"130","severity":1,"message":"157","line":25,"column":11,"nodeType":"132","messageId":"133","endLine":25,"endColumn":18},{"ruleId":"134","severity":1,"message":"158","line":36,"column":8,"nodeType":"136","endLine":36,"endColumn":10,"suggestions":"159"},{"ruleId":"134","severity":1,"message":"160","line":32,"column":6,"nodeType":"136","endLine":32,"endColumn":21,"suggestions":"161"},"no-unused-vars","'logger' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.","ArrayExpression",["162"],"React Hook useEffect has missing dependencies: 'history' and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["163"],"import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","'Link' is defined but never used.","'userLogin' is assigned a value but never used.","'users' is assigned a value but never used.","'setUsers' is assigned a value but never used.","'newUser' is assigned a value but never used.","'axios' is defined but never used.","'axiosWithAuth' is defined but never used.",["164"],"'EditForm' is defined but never used.","'tempData' is defined but never used.","'DialogContentText' is defined but never used.","'image_url' is assigned a value but never used.","'categories' is assigned a value but never used.","'edit' is assigned a value but never used.","'setEdit' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'props.categories', 'props.ingredients', 'props.instructions', 'props.private', 'props.source', and 'props.title'. Either include them or remove the dependency array. If 'setFormData' needs the current value of 'props.private', you can also switch to useReducer instead of useState and read 'props.private' in the reducer.",["165"],"React Hook useEffect has missing dependencies: 'index' and 'updateIngredients'. Either include them or remove the dependency array.",["166"],{"desc":"167","fix":"168"},{"desc":"169","fix":"170"},{"desc":"167","fix":"171"},{"desc":"172","fix":"173"},{"desc":"174","fix":"175"},"Update the dependencies array to be: [props]",{"range":"176","text":"177"},"Update the dependencies array to be: [history, props]",{"range":"178","text":"179"},{"range":"180","text":"177"},"Update the dependencies array to be: [props.categories, props.ingredients, props.instructions, props.private, props.source, props.title]",{"range":"181","text":"182"},"Update the dependencies array to be: [index, ingredientObj, updateIngredients]",{"range":"183","text":"184"},[789,791],"[props]",[362,364],"[history, props]",[579,581],[1022,1024],"[props.categories, props.ingredients, props.instructions, props.private, props.source, props.title]",[1010,1025],"[index, ingredientObj, updateIngredients]"]